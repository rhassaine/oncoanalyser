nextflow_process {
    name "Test Process LILAC"
    script "modules/local/lilac/main.nf"
    process "LILAC"
    config "tests/nextflow.config"

    test("LILAC with tumor and normal samples") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/sage_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }

            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'subject_a.tumor', normal_id: 'subject_a.normal'],
                    file('/home/rhassaine/container_test_output/subject_a/alignments/dna/subject_a.normal.redux.bam', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/alignments/dna/subject_a.normal.redux.bam.bai', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/alignments/dna/subject_a.tumor.redux.bam', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/alignments/dna/subject_a.tumor.redux.bam.bai', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/alignments/rna/subject_a.tumor_rna.md.bam', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/alignments/rna/subject_a.tumor_rna.md.bam.bai', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/purple/', checkIfExists: true)
                ]
                input[1] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[2] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[3] = 38
                input[4] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/lilac/", checkIfExists: true)
                """
            }
        }

        then {
            assert process.success
            assert process.out.lilac_dir != null
            assert process.out.lilac_dir.size() > 0
            
            def lilacDir = path(process.out.lilac_dir[0][1])
            assert lilacDir.exists()
            assert lilacDir.list().size() > 0
            
            // Single snapshot for the entire lilac directory
            assert snapshot(lilacDir.list().sort().join("\n"), "lilac_directory_contents").match()
            
            // Additional assertions for specific files (without snapshots)
            assert lilacDir.resolve("subject_a.tumor.lilac.candidates.coverage.tsv").exists()
            assert lilacDir.resolve("subject_a.tumor.lilac.qc.tsv").exists()
            assert lilacDir.resolve("subject_a.tumor.lilac.tsv").exists()
            
            assert process.out.versions != null
            assert process.out.versions.size() > 0
            assert path(process.out.versions[0]).exists()
        }
    }

    test("LILAC should fail when critical input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/sage_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'subject_a.tumor', normal_id: 'subject_a.normal'],
                    [],  // Missing normal DNA BAM
                ]
                """
            }
        }

        then {
            assert !process.success
            assert process.exitStatus != 0
        }
    }
}