nextflow_process {
    name "Test Process AMBER"
    script "modules/local/amber/main.nf"
    process "AMBER"
    config "tests/nextflow.config"

    test("AMBER with tumor and normal") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'tumor_test', normal_id: 'normal_test'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data + 'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    [],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    file(params.test_sample_data + 'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = "38"
                input[2] = file("https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/reference_data/hmftools/5.34_38--2/dna_pipeline/copy_number/AmberGermlineSites.38.tsv.gz")
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.amber_dir != null },
                { assert process.out.amber_dir.size() > 0 },
                { assert process.out.amber_dir[0].size() > 1 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def amber_output_dir = process.out.amber_dir[0][1]
                assertAll(
                    { assert path(amber_output_dir).resolve("amber.version").exists() },
                    { assert path(amber_output_dir).resolve("normal_test.amber.homozygousregion.tsv").exists() },
                    { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz").exists() },
                    { assert path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz.tbi").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.baf.pcf").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.baf.tsv.gz").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.tsv").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz.tbi").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.qc").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("AMBER with tumor only") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'tumor_test'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    [],
                    [],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    [],
                    []
                ]
                input[1] = "38"
                input[2] = file("https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/reference_data/hmftools/5.34_38--2/dna_pipeline/copy_number/AmberGermlineSites.38.tsv.gz")
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.amber_dir != null },
                { assert process.out.amber_dir.size() > 0 },
                { assert process.out.amber_dir[0].size() > 1 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def amber_output_dir = process.out.amber_dir[0][1]
                assertAll(
                    { assert path(amber_output_dir).resolve("amber.version").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.baf.pcf").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.baf.tsv.gz").exists() },
                    { assert path(amber_output_dir).resolve("tumor_test.amber.qc").exists() },
                    { assert !path(amber_output_dir).resolve("tumor_test.amber.contamination.tsv").exists() },
                    { assert !path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz").exists() },
                    { assert !path(amber_output_dir).resolve("tumor_test.amber.contamination.vcf.gz.tbi").exists() },
                    { assert !path(amber_output_dir).resolve("normal_test.amber.homozygousregion.tsv").exists() },
                    { assert !path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz").exists() },
                    { assert !path(amber_output_dir).resolve("normal_test.amber.snp.vcf.gz.tbi").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("AMBER should fail when input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'tumor_test'],
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}