nextflow_process {
    name "Test Process SIGS"
    script "modules/local/sigs/main.nf"
    process "SIGS"
    config "tests/nextflow.config"

    test("SIGS with default parameters") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/pave_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    file('/home/rhassaine/container_test_output/subject_a/purple/subject_a.tumor.purple.somatic.vcf.gz', checkIfExists: true)
                ]
                input[1] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/sigs/snv_cosmic_signatures.csv", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.sigs_dir != null },
                { assert process.out.sigs_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def sigs_output_dir = process.out.sigs_dir[0][1]
                def sample_id = process.out.sigs_dir[0][0].sample_id
                assertAll(
                    { assert path(sigs_output_dir).resolve("${sample_id}.sig.allocation.tsv").exists() },
                    { assert path(sigs_output_dir).resolve("${sample_id}.sig.snv_counts.csv").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("SIGS should fail when input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/pave_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    []  // Missing VCF file
                ]
                input[1] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/sigs/snv_cosmic_signatures.csv", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}