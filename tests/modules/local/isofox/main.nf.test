nextflow_process {
    name "Test Process ISOFOX"
    script "modules/local/isofox/main.nf"
    process "ISOFOX"
    config "tests/nextflow.config"

    test("ISOFOX with all inputs") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }

        setup {
            println "Workflow containerEngine: ${workflow?.containerEngine}"
            println "Task container: ${task.container}"
            println "Process container: ${process.container}"
        }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true)
                ]
                input[1] = 'TRANSCRIPT_COUNTS;ALT_SPLICE_JUNCTIONS;FUSIONS;RETAINED_INTRONS'
                input[2] = 151
                input[3] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[4] = 38
                input[5] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[6] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                input[7] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/sv/known_fusion_data.38.csv", checkIfExists: true)
                input[8] = []
                input[9] = []
                input[10] = []
                input[11] = []

                // Print out all input values for debugging
                println "Input 0: " + input[0]
                println "Input 1: " + input[1]
                println "Input 2: " + input[2]
                println "Input 3: " + input[3]
                println "Input 4: " + input[4]
                println "Input 5: " + input[5]
                println "Input 6: " + input[6]
                println "Input 7: " + input[7]
                println "Input 8: " + input[8]
                println "Input 9: " + input[9]
                println "Input 10: " + input[10]
                println "Input 11: " + input[11]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.isofox_dir != null },
                { assert process.out.isofox_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def isofox_output_dir = process.out.isofox_dir[0][1]
                def sample_id = process.out.isofox_dir[0][0].sample_id
                assertAll(
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.alt_splice_junc.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.fusions.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.gene_collection.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.gene_data.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.pass_fusions.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.retained_intron.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.summary.csv").exists() },
                    { assert path(isofox_output_dir).resolve("${sample_id}.isf.transcript_data.csv").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("ISOFOX should fail when input is missing") {
        when {
            process {
                """
                input[0] = [ [id: 'test', sample_id: 'subject_a.tumor'], [], [] ]
                input[1] = 'TRANSCRIPT_COUNTS;ALT_SPLICE_JUNCTIONS;FUSIONS;RETAINED_INTRONS'
                input[4] = 38
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}