nextflow_process {
    name "Test Process LINX_VISUALISER"
    script "modules/local/linx/visualiser/main.nf"
    process "LINX_VISUALISER"
    config "tests/nextflow.config"

    test("LINX_VISUALISER with default parameters") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    file('/home/rhassaine/container_test_output/subject_a/linx/somatic_annotations/')
                ]
                input[1] = 38
                input[2] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.plots != null },
                { assert process.out.plots.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def plots_dir = process.out.plots[0][1]
                def sample_id = process.out.plots[0][0].sample_id

                // Check that the 'all' and 'reportable' directories exist
                assertAll(
                    { assert path(plots_dir).resolve("all").exists() },
                    { assert path(plots_dir).resolve("reportable").exists() }
                )

                // Check the content of 'all' directory
                def all_plots = path(plots_dir).resolve("all").list()
                if (all_plots.size() > 0) {
                    assertAll(
                        { assert all_plots.every { it.fileName.toString().startsWith(sample_id) && it.fileName.toString().endsWith(".png") } },
                        { assert all_plots.any { it.fileName.toString().contains(".chr") || it.fileName.toString().contains(".cluster-") } }
                    )
                } else {
                    println "No plots generated in 'all' directory"
                }

                // Check the content of 'reportable' directory
                def reportable_plots = path(plots_dir).resolve("reportable").list()
                if (reportable_plots.size() > 0) {
                    assertAll(
                        { assert reportable_plots.every { it.fileName.toString().startsWith(sample_id) && it.fileName.toString().endsWith(".png") } },
                        { assert reportable_plots.every { it.fileName.toString().contains(".cluster-") } }
                    )
                } else {
                    println "No plots generated in 'reportable' directory"
                }

                // Check versions
                assertAll(
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("LINX_VISUALISER should fail when essential input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = []  // Missing input
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}