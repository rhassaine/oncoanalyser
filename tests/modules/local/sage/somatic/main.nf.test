nextflow_process {
    name "Test Process SAGE_SOMATIC"
    script "modules/local/sage/somatic/main.nf"
    process "SAGE_SOMATIC"
    config "tests/nextflow.config"

    test("SAGE_SOMATIC with tumor and normal") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'subject_a.tumor', normal_id: 'subject_a.normal'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    file(params.test_sample_data + 'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    [],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    file(params.test_sample_data + 'subject_a.normal.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    [],
                    [
                        file(params.resource_path + "redux_test_prof_38/subject_a.tumor.jitter_params.tsv", checkIfExists: true),
                        file(params.resource_path + "redux_test_prof_38/subject_a.tumor.ms_table.tsv.gz", checkIfExists: true),
                        file(params.resource_path + "redux_test_prof_38/subject_a.normal.jitter_params.tsv", checkIfExists: true),
                        file(params.resource_path + "redux_test_prof_38/subject_a.normal.ms_table.tsv.gz", checkIfExists: true)
                    ]
                ]
                input[1] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[2] = 38
                input[3] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[4] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.dict", checkIfExists: true)
                input[5] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/KnownHotspots.somatic.38.vcf.gz", checkIfExists: true)
                input[6] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/ActionableCodingPanel.38.bed.gz", checkIfExists: true)
                input[7] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/CoverageCodingPanel.38.bed.gz", checkIfExists: true)
                input[8] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_nosomaticdel_noCENorHET7.bed.gz", checkIfExists: true)
                input[9] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf != null },
                { assert process.out.vcf.size() > 0 },
                { assert process.out.sage_dir != null },
                { assert process.out.sage_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def sage_output_dir = process.out.sage_dir[0][1]
                assertAll(
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.somatic.vcf.gz").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.somatic.vcf.gz.tbi").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.bqr.png").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.bqr.tsv").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.normal.sage.bqr.png").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.normal.sage.bqr.tsv").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("SAGE_SOMATIC with tumor only") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'subject_a.tumor'],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam', checkIfExists: true),
                    [],
                    [],
                    file(params.test_sample_data + 'subject_a.tumor.dna.bwa-mem2_2.2.1.markdups.bam.bai', checkIfExists: true),
                    [],
                    [],
                    [
                        file(params.resource_path + "redux_test_prof_38/subject_a.tumor.jitter_params.tsv", checkIfExists: true),
                        file(params.resource_path + "redux_test_prof_38/subject_a.tumor.ms_table.tsv.gz", checkIfExists: true)
                    ]
                ]
                input[1] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[2] = 38
                input[3] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[4] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.dict", checkIfExists: true)
                input[5] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/KnownHotspots.somatic.38.vcf.gz", checkIfExists: true)
                input[6] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/ActionableCodingPanel.38.bed.gz", checkIfExists: true)
                input[7] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/CoverageCodingPanel.38.bed.gz", checkIfExists: true)
                input[8] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_nosomaticdel_noCENorHET7.bed.gz", checkIfExists: true)
                input[9] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf != null },
                { assert process.out.vcf.size() > 0 },
                { assert process.out.sage_dir != null },
                { assert process.out.sage_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def sage_output_dir = process.out.sage_dir[0][1]
                assertAll(
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.somatic.vcf.gz").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.somatic.vcf.gz.tbi").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.bqr.png").exists() },
                    { assert path(sage_output_dir).resolve("subject_a.tumor.sage.bqr.tsv").exists() },
                    { assert !path(sage_output_dir).resolve("subject_a.normal.sage.bqr.png").exists() },
                    { assert !path(sage_output_dir).resolve("subject_a.normal.sage.bqr.tsv").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("SAGE_SOMATIC should fail when input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/markdups_bam/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', tumor_id: 'subject_a.tumor'],
                    [],  // Missing tumor BAM
                    [],
                    [],
                    [],
                    [],
                    [],
                    []
                ]
                input[1] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[2] = 38
                input[3] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[4] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.dict", checkIfExists: true)
                input[5] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/KnownHotspots.somatic.38.vcf.gz", checkIfExists: true)
                input[6] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/ActionableCodingPanel.38.bed.gz", checkIfExists: true)
                input[7] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/CoverageCodingPanel.38.bed.gz", checkIfExists: true)
                input[8] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/HG001_GRCh38_GIAB_highconf_CG-IllFB-IllGATKHC-Ion-10X-SOLID_CHROM1-X_v.3.3.2_highconf_nosomaticdel_noCENorHET7.bed.gz", checkIfExists: true)
                input[9] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 },

            )
        }
    }
}