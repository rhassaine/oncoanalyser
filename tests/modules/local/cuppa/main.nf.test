nextflow_process {
    name "Test Process CUPPA"
    script "modules/local/cuppa/main.nf"
    process "CUPPA"
    config "tests/nextflow.config"

    test("CUPPA with default parameters (ALL categories)") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor', sample_rna_id: 'subject_a.tumor_rna'],
                    file('/home/rhassaine/container_test_output/subject_a/isofox/'),
                    file('/home/rhassaine/container_test_output/subject_a/purple/'),
                    file('/home/rhassaine/container_test_output/subject_a/linx/somatic_annotations/'),
                    file('/home/rhassaine/container_test_output/subject_a/virusinterpreter/')
                ]
                input[1] = 38
                input[2] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/cuppa/alt_sj.selected_loci.38.tsv.gz", checkIfExists: true)
                input[3] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/cuppa/cuppa_classifier.38.pickle.gz", checkIfExists: true)
                input[4] = 'ALL'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.cuppa_dir != null },
                { assert process.out.cuppa_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def cuppa_output_dir = process.out.cuppa_dir[0][1]
                def sample_id = process.out.cuppa_dir[0][0].sample_id
                assertAll(
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa_data.tsv.gz").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.pred_summ.tsv").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.vis_data.tsv").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.vis.png").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("CUPPA with DNA-only categories") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor', sample_rna_id: 'subject_a.tumor_rna'],
                    [],  // No ISOFOX directory for DNA-only
                    file('/home/rhassaine/container_test_output/subject_a/purple/'),
                    file('/home/rhassaine/container_test_output/subject_a/linx/somatic_annotations/'),
                    file('/home/rhassaine/container_test_output/subject_a/virusinterpreter/')
                ]
                input[1] = 38
                input[2] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/cuppa/alt_sj.selected_loci.38.tsv.gz", checkIfExists: true)
                input[3] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/misc/cuppa/cuppa_classifier.38.pickle.gz", checkIfExists: true)
                input[4] = 'DNA'
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.cuppa_dir != null },
                { assert process.out.cuppa_dir.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                def cuppa_output_dir = process.out.cuppa_dir[0][1]
                def sample_id = process.out.cuppa_dir[0][0].sample_id
                assertAll(
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa_data.tsv.gz").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.pred_summ.tsv").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.vis_data.tsv").exists() },
                    { assert path(cuppa_output_dir).resolve("${sample_id}.cuppa.vis.png").exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("CUPPA should fail when input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor', sample_rna_id: 'subject_a.tumor_rna'],
                    [],  // Missing ISOFOX directory
                    [],  // Missing PURPLE directory
                    [],  // Missing LINX directory
                    []   // Missing VIRUSINTERPRETER directory
                ]
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}