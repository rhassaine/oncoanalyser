nextflow_process {
    name "Test Process PAVE_GERMLINE"
    script "modules/local/pave/germline/main.nf"
    process "PAVE_GERMLINE"
    config "tests/nextflow.config"

    test("PAVE_GERMLINE") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/sage_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }

            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    file('/home/rhassaine/container_test_output/subject_a/sage/germline/subject_a.tumor.sage.germline.vcf.gz', checkIfExists: true),
                    file('/home/rhassaine/container_test_output/subject_a/sage/germline/subject_a.tumor.sage.germline.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna", checkIfExists: true)
                input[2] = 38
                input[3] = file(params.resource_path + "GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.fai", checkIfExists: true)
                input[4] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/KnownBlacklist.germline.38.bed", checkIfExists: true)
                input[5] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/KnownBlacklist.germline.38.vcf.gz", checkIfExists: true)
                input[6] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/clinvar.38.vcf.gz", checkIfExists: true)
                input[7] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/mappability_150.38.bed.gz", checkIfExists: true)
                input[8] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/DriverGenePanel.38.tsv", checkIfExists: true)
                input[9] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/common/ensembl_data/", checkIfExists: true)
                input[10] = file(params.resource_path + "hmf_pipeline_resources.38_v6.0--2/dna/variants/gnomad/", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.vcf != null },
                { assert process.out.vcf.size() > 0 },
                { assert process.out.index != null },
                { assert process.out.index.size() > 0 },
                { assert snapshot(process.out).match() }
            )

            if (process.success) {
                assertAll(
                    { assert path(process.out.vcf[0][1]).exists() },
                    { assert path(process.out.index[0][1]).exists() },
                    { assert process.out.versions != null },
                    { assert process.out.versions.size() > 0 },
                    { assert path(process.out.versions[0]).exists() }
                )
            }
        }
    }

    test("PAVE_GERMLINE should fail when input is missing") {
        when {
            params {
                test_sample_data = 'https://raw.githubusercontent.com/nf-core/test-datasets/oncoanalyser/sample_data/simulated_reads/wgts/sage_vcf/'
                resource_path = '/home/rhassaine/resources_files_oa/38/'
                mode = 'WGS'
            }
            process {
                """
                input[0] = [
                    [id: 'test', sample_id: 'subject_a.tumor'],
                    [],  // Missing SAGE VCF
                    []   // Missing SAGE TBI
                ]
                """
            }
        }

        then {
            assertAll(
                { assert !process.success },
                { assert process.exitStatus != 0 }
            )
        }
    }
}